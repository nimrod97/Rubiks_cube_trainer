package com.rubiks.rubikscubetrainer;

import android.content.Context;
import android.opengl.GLSurfaceView;
import android.util.AttributeSet;
import android.view.MotionEvent;

import com.rubiks.rubikscubetrainer.matrix.MatrixTrackingGL;

import javax.microedition.khronos.opengles.GL;

// The view that containing the cube that we see in the screen.
public class GLView extends GLSurfaceView {
    private GLRenderer glrenderer;
    private int mode; //  0 - playing with virtual cube generated by the app
    // 1- verify scanned colors
    // 2- showing one of the scanned cubes from the db
    // 3- playing with scanned cube after verifying the colors

    public GLView(Context context, AttributeSet attr) {
        super(context, attr);
        if (context.getClass().toString().endsWith("PlayingWithScannedCube"))
            mode = 1;
        else if (context.getClass().toString().endsWith("CubeFromDB"))
            mode = 2;
        else
            mode = 0;

        if (glrenderer != null) return;
        glrenderer = new GLRenderer(getResources().getDisplayMetrics().widthPixels,
                getResources().getDisplayMetrics().heightPixels, context, mode);
        setRenderer(glrenderer);
        setGLWrapper(new GLWrapper() {

            @Override
            public GL wrap(GL gl) {
                return new MatrixTrackingGL(gl);
            }
        });
    }

    public GLView(Context context) {
        super(context);
        if (context.getClass().toString().endsWith("PlayingWithScannedCube"))
            mode = 1;
        else
            mode = 0;
        if (glrenderer != null) return;
        glrenderer = new GLRenderer(getResources().getDisplayMetrics().widthPixels,
                getResources().getDisplayMetrics().heightPixels, context, mode);
        setRenderer(glrenderer);
        setGLWrapper(new GLWrapper() {

            @Override
            public GL wrap(GL gl) {
                return new MatrixTrackingGL(gl);
            }
        });
    }

    public void mix() {
        glrenderer.mix();
    }

    public void cancelMove() {
        glrenderer.cancelMove();
    }

    public boolean onTouchEvent(final MotionEvent event) {
        glrenderer.handleTouch(event);
        return true;
    }

    public void setMode(int mode) {
        this.mode = mode;
        glrenderer.setMode(mode);
    }

    public GLRenderer getGlrenderer() {
        return glrenderer;
    }

}
